const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const optimize = b.standardOptimizeOption(.{});

    // 1. Create the main library module.
    // Use `b.addModule` to make this a public, exportable module.
    const omega_rag_module = b.addModule("omega_rag", .{
        .root_source_file = b.path("src/root.zig"),
        .target = target,
        .optimize = optimize,
    });

    // 2. Create a separate module for the executable's main entry point.
    const exe_module = b.createModule(.{
        .root_source_file = b.path("src/main.zig"),
        .target = target,
        .optimize = optimize,
    });
    // Add the library module as a dependency to the executable module.
    exe_module.addImport("omega_rag", omega_rag_module);

    // 3. Create the main executable.
    // The executable is configured with the `exe_module`.
    const exe = b.addExecutable(.{
        .name = "omega_rag_demo",
        .root_module = exe_module,
    });
    b.installArtifact(exe);

    // 4. Define the run step.
    const run_cmd = b.addRunArtifact(exe);
    run_cmd.step.dependOn(b.getInstallStep());
    if (b.args) |args| {
        run_cmd.addArgs(args);
    }
    const run_step = b.step("run", "Run the demo application");
    run_step.dependOn(&run_cmd.step);

    // 5. Set up the unit tests.
    const test_step = b.step("test", "Run all unit tests");
    
    // Add a test executable for the library module itself
    const lib_tests = b.addTest(.{
        .root_module = omega_rag_module,
    });
    const run_lib_tests = b.addRunArtifact(lib_tests);
    test_step.dependOn(&run_lib_tests.step);

    // Create a test module for all other test files
    const test_module = b.createModule(.{
        .root_source_file = b.path("tests/all_tests.zig"),
        .target = target,
        .optimize = optimize,
    });
    test_module.addImport("omega_rag", omega_rag_module);
    
    const individual_tests = b.addTest(.{
        .root_module = test_module,
    });
    const run_individual_tests = b.addRunArtifact(individual_tests);
    test_step.dependOn(&run_individual_tests.step);

    // 6. Benchmark executable.
    const benchmark_module = b.createModule(.{
        .root_source_file = b.path("tests/benchmark.zig"),
        .target = target,
        .optimize = .ReleaseFast,
    });
    benchmark_module.addImport("omega_rag", omega_rag_module);

    const benchmark = b.addExecutable(.{
        .name = "benchmark",
        .root_module = benchmark_module,
    });
    b.installArtifact(benchmark);
    
    const run_benchmark = b.addRunArtifact(benchmark);
    const benchmark_step = b.step("benchmark", "Run performance benchmarks");
    benchmark_step.dependOn(&run_benchmark.step);

    // 7. Documentation generation.
    const docs_step = b.step("docs", "Generate documentation for the omega_rag library");
    const doc_gen = b.addInstallDirectory(.{
        .source_dir = omega_rag_module.getEmittedDocs(),
        .install_dir = .prefix,
        .install_subdir = "docs",
    });
    docs_step.dependOn(&doc_gen.step);
}
